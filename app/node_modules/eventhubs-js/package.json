{
  "name": "eventhubs-js",
  "version": "1.1.3",
  "description": "Easy to use client for Azure event hubs",
  "main": "client.js",
  "repository": {
    "type": "git",
    "url": "https://github.com/ytechie/eventhubs-js"
  },
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "author": {
    "name": "Jason Young",
    "email": "jason@ytechie.com"
  },
  "license": "Apache2",
  "keywords": [
    "event",
    "hubs",
    "azure",
    "service",
    "bus",
    "mqtt"
  ],
  "dependencies": {
    "moment": "^2.8.4",
    "q": "^1.1.2"
  },
  "devDependencies": {
    "easy-config": "^0.4.3"
  },
  "readme": "An Azure Event Hub client that is easy to use and performs well. From a local machine, I'm able to sustain **~300** *single* messages per second from a single client. When running in an Azure VM in the same region as the Event Hubs instance, I was able to send **~400** *single* messages per second. From a Raspberry PI, I was able to send **~40** *single* messages per second.\r\nThere is an option for batching messages if needed by using the `sendMessages` function.\r\n\r\n### Easy Dev Usage\r\n\r\n    eventHubs.init({\r\n        hubNamespace: eventHubsNamespace,\r\n        hubName: eventHubsHubName,\r\n        keyName: eventHubsKeyName,\r\n        key: eventHubsKey\r\n    });\r\n\r\n    var deviceMessage = {\r\n        Temperature: 45.2,\r\n        Pressure: 23.7\r\n    }\r\n\r\n    eventHubs.sendMessage({\r\n        message: deviceMessage,\r\n        deviceId: 1,\r\n    });\r\n\r\nNote: deviceId is simply a unique name to identify your device to Azure. If not given, you will recieve a 401 Authorization failed response.\r\n\r\n### Production Usages\r\n\r\nWhen you initialize the event hubs client, it's advisable to use a SAS token in a production environment. This is a revokable key that is unique to the device. You can generate a token programatically, or [online using this form](http://eventhubssasgenerator.azurewebsites.net/).\r\n\r\n    eventHubs.init({\r\n        hubNamespace: eventHubsNamespace,\r\n        hubName: eventHubsHubName,\r\n        sasToken: sasToken\r\n    });\r\n\r\nFor batching multiple messages and sending them together in single REST call, use the `sendMessages` function:\r\n\r\n    eventHubs.sendMessages({\r\n        messages: [], // array of messages\r\n        deviceId: 1,\r\n    });\r\n\r\nBeware that Azure EventHub REST API has a limit of 256kb for batching (per call), so make sure you batched messages\r\ndo not reach this limit (otherwise an error will be returned).\r\n\r\n### Installation\r\n\r\n\tnpm install eventhubs-js\r\n\r\nDon't forget to update your `package.json` file.\r\n\r\n### Performance Optimizations\r\n\r\nPerformance was optimized in a number of ways:\r\n\r\n1. Setting `http.globalAgent.maxSockets = 50;` increases the HTTP connection pool, which allows us to create more connections to serve messages that need sent. If you don't send a large volume of messages, no problem, the pool will remain relatively empty.\r\n2. Caching the SAS Tokens. I haven't tested the performance of the node.js crypto libraries and moment time calculations, but it was easy enough to cache the generated SAS tokens to avoid recalcuating on each message.\r\n3. Automatic recreation of cached token just before it expires\r\n\r\n### Examples & Promises\r\n\r\nPromises allow you to chain calls without \"callback hell\":\r\n\r\n    eventHubs.sendMessage({\r\n        message: deviceMessage,\r\n        deviceId: 1,\r\n    }).then(function() {\r\n\tconsole.log('Message Sent!');\r\n    });\r\n\r\nPromises also allow us to kick of multiple send requests simultaneously, and easily manage the results:\r\n\r\n\tvar promise, promises;\r\n    \r\n\tfor (i = 0; i < iterations; i++) {\r\n        promise = eventHubs.sendMessage({\r\n        \tmessage: deviceMessage,\r\n\t\t\tdeviceId: 1,\r\n    \t});\r\n\r\n        promises.push(promise);\r\n    }\r\n    Q.allSettled(promises).then(function () {\r\n        console.log('All Messages Sent!');\r\n    });\r\n\r\n### Alternative Clients\r\n\r\n* [https://git.allseenalliance.org/cgit/core/alljoyn-js.git/tree/](https://git.allseenalliance.org/cgit/core/alljoyn-js.git/tree/)\r\n* [https://github.com/noodlefrenzy/event-hub-client](https://github.com/noodlefrenzy/event-hub-client)\r\n\r\n# License\r\n\r\nMicrosoft Developer Experience & Evangelism\r\n\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\n\r\nTHIS CODE AND INFORMATION ARE PROVIDED \"AS IS\" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR PURPOSE.\r\n\r\nThe example companies, organizations, products, domain names, e-mail addresses, logos, people, places, and events depicted herein are fictitious. No association with any real company, organization, product, domain name, email address, logo, person, places, or events is intended or should be inferred.\r\n",
  "readmeFilename": "readme.md",
  "bugs": {
    "url": "https://github.com/ytechie/eventhubs-js/issues"
  },
  "_id": "eventhubs-js@1.1.3",
  "dist": {
    "shasum": "a0a7c852d106f2a2c3e8530d17eb7383e0cb8722"
  },
  "_from": "eventhubs-js@",
  "_resolved": "https://registry.npmjs.org/eventhubs-js/-/eventhubs-js-1.1.3.tgz"
}
